# Generated from src/gramaticaEspanol.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
#else:
    #from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,355,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,3,24,290,8,24,1,25,1,25,5,25,294,8,25,10,25,12,25,297,9,25,
        1,26,4,26,300,8,26,11,26,12,26,301,1,26,1,26,4,26,306,8,26,11,26,
        12,26,307,3,26,310,8,26,1,27,1,27,5,27,314,8,27,10,27,12,27,317,
        9,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,328,8,28,
        10,28,12,28,331,9,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,34,4,34,348,8,34,11,34,12,34,349,1,34,
        1,34,1,35,1,35,1,329,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,1,0,5,14,0,65,90,97,122,193,193,
        201,201,205,205,209,209,211,211,218,218,225,225,233,233,237,237,
        241,241,243,243,250,250,16,0,48,57,65,90,95,95,97,122,193,193,201,
        201,205,205,209,209,211,211,218,218,225,225,233,233,237,237,241,
        241,243,243,250,250,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,
        13,32,32,364,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,81,1,0,0,0,5,84,1,0,0,0,7,94,
        1,0,0,0,9,98,1,0,0,0,11,107,1,0,0,0,13,114,1,0,0,0,15,119,1,0,0,
        0,17,128,1,0,0,0,19,134,1,0,0,0,21,145,1,0,0,0,23,148,1,0,0,0,25,
        163,1,0,0,0,27,176,1,0,0,0,29,189,1,0,0,0,31,202,1,0,0,0,33,223,
        1,0,0,0,35,244,1,0,0,0,37,248,1,0,0,0,39,254,1,0,0,0,41,258,1,0,
        0,0,43,264,1,0,0,0,45,266,1,0,0,0,47,268,1,0,0,0,49,289,1,0,0,0,
        51,291,1,0,0,0,53,299,1,0,0,0,55,311,1,0,0,0,57,320,1,0,0,0,59,336,
        1,0,0,0,61,338,1,0,0,0,63,340,1,0,0,0,65,342,1,0,0,0,67,344,1,0,
        0,0,69,347,1,0,0,0,71,353,1,0,0,0,73,74,5,102,0,0,74,75,5,117,0,
        0,75,76,5,110,0,0,76,77,5,99,0,0,77,78,5,105,0,0,78,79,5,111,0,0,
        79,80,5,110,0,0,80,2,1,0,0,0,81,82,5,115,0,0,82,83,5,105,0,0,83,
        4,1,0,0,0,84,85,5,101,0,0,85,86,5,110,0,0,86,87,5,116,0,0,87,88,
        5,111,0,0,88,89,5,110,0,0,89,90,5,99,0,0,90,91,5,101,0,0,91,92,5,
        115,0,0,92,93,5,58,0,0,93,6,1,0,0,0,94,95,5,102,0,0,95,96,5,105,
        0,0,96,97,5,110,0,0,97,8,1,0,0,0,98,99,5,109,0,0,99,100,5,105,0,
        0,100,101,5,101,0,0,101,102,5,110,0,0,102,103,5,116,0,0,103,104,
        5,114,0,0,104,105,5,97,0,0,105,106,5,115,0,0,106,10,1,0,0,0,107,
        108,5,97,0,0,108,109,5,115,0,0,109,110,5,105,0,0,110,111,5,103,0,
        0,111,112,5,110,0,0,112,113,5,97,0,0,113,12,1,0,0,0,114,115,5,97,
        0,0,115,116,5,32,0,0,116,117,5,108,0,0,117,118,5,97,0,0,118,14,1,
        0,0,0,119,120,5,100,0,0,120,121,5,101,0,0,121,122,5,118,0,0,122,
        123,5,117,0,0,123,124,5,101,0,0,124,125,5,108,0,0,125,126,5,118,
        0,0,126,127,5,101,0,0,127,16,1,0,0,0,128,129,5,101,0,0,129,130,5,
        115,0,0,130,131,5,32,0,0,131,132,5,117,0,0,132,133,5,110,0,0,133,
        18,1,0,0,0,134,135,5,97,0,0,135,136,5,114,0,0,136,137,5,114,0,0,
        137,138,5,101,0,0,138,139,5,103,0,0,139,140,5,108,0,0,140,141,5,
        111,0,0,141,142,5,32,0,0,142,143,5,100,0,0,143,144,5,101,0,0,144,
        20,1,0,0,0,145,146,5,100,0,0,146,147,5,101,0,0,147,22,1,0,0,0,148,
        149,5,101,0,0,149,150,5,115,0,0,150,151,5,32,0,0,151,152,5,100,0,
        0,152,153,5,105,0,0,153,154,5,115,0,0,154,155,5,116,0,0,155,156,
        5,105,0,0,156,157,5,110,0,0,157,158,5,116,0,0,158,159,5,111,0,0,
        159,160,5,32,0,0,160,161,5,100,0,0,161,162,5,101,0,0,162,24,1,0,
        0,0,163,164,5,101,0,0,164,165,5,115,0,0,165,166,5,32,0,0,166,167,
        5,105,0,0,167,168,5,103,0,0,168,169,5,117,0,0,169,170,5,97,0,0,170,
        171,5,108,0,0,171,172,5,32,0,0,172,173,5,113,0,0,173,174,5,117,0,
        0,174,175,5,101,0,0,175,26,1,0,0,0,176,177,5,101,0,0,177,178,5,115,
        0,0,178,179,5,32,0,0,179,180,5,109,0,0,180,181,5,97,0,0,181,182,
        5,121,0,0,182,183,5,111,0,0,183,184,5,114,0,0,184,185,5,32,0,0,185,
        186,5,113,0,0,186,187,5,117,0,0,187,188,5,101,0,0,188,28,1,0,0,0,
        189,190,5,101,0,0,190,191,5,115,0,0,191,192,5,32,0,0,192,193,5,109,
        0,0,193,194,5,101,0,0,194,195,5,110,0,0,195,196,5,111,0,0,196,197,
        5,114,0,0,197,198,5,32,0,0,198,199,5,113,0,0,199,200,5,117,0,0,200,
        201,5,101,0,0,201,30,1,0,0,0,202,203,5,101,0,0,203,204,5,115,0,0,
        204,205,5,32,0,0,205,206,5,109,0,0,206,207,5,97,0,0,207,208,5,121,
        0,0,208,209,5,111,0,0,209,210,5,114,0,0,210,211,5,32,0,0,211,212,
        5,111,0,0,212,213,5,32,0,0,213,214,5,105,0,0,214,215,5,103,0,0,215,
        216,5,117,0,0,216,217,5,97,0,0,217,218,5,108,0,0,218,219,5,32,0,
        0,219,220,5,113,0,0,220,221,5,117,0,0,221,222,5,101,0,0,222,32,1,
        0,0,0,223,224,5,101,0,0,224,225,5,115,0,0,225,226,5,32,0,0,226,227,
        5,109,0,0,227,228,5,101,0,0,228,229,5,110,0,0,229,230,5,111,0,0,
        230,231,5,114,0,0,231,232,5,32,0,0,232,233,5,111,0,0,233,234,5,32,
        0,0,234,235,5,105,0,0,235,236,5,103,0,0,236,237,5,117,0,0,237,238,
        5,97,0,0,238,239,5,108,0,0,239,240,5,32,0,0,240,241,5,113,0,0,241,
        242,5,117,0,0,242,243,5,101,0,0,243,34,1,0,0,0,244,245,5,109,0,0,
        245,246,5,97,0,0,246,247,5,115,0,0,247,36,1,0,0,0,248,249,5,109,
        0,0,249,250,5,101,0,0,250,251,5,110,0,0,251,252,5,111,0,0,252,253,
        5,115,0,0,253,38,1,0,0,0,254,255,5,112,0,0,255,256,5,111,0,0,256,
        257,5,114,0,0,257,40,1,0,0,0,258,259,5,101,0,0,259,260,5,110,0,0,
        260,261,5,116,0,0,261,262,5,114,0,0,262,263,5,101,0,0,263,42,1,0,
        0,0,264,265,5,121,0,0,265,44,1,0,0,0,266,267,5,111,0,0,267,46,1,
        0,0,0,268,269,5,110,0,0,269,270,5,111,0,0,270,48,1,0,0,0,271,272,
        5,101,0,0,272,273,5,110,0,0,273,274,5,116,0,0,274,275,5,101,0,0,
        275,276,5,114,0,0,276,290,5,111,0,0,277,278,5,114,0,0,278,279,5,
        101,0,0,279,280,5,97,0,0,280,290,5,108,0,0,281,282,5,116,0,0,282,
        283,5,101,0,0,283,284,5,120,0,0,284,285,5,116,0,0,285,290,5,111,
        0,0,286,287,5,98,0,0,287,288,5,105,0,0,288,290,5,116,0,0,289,271,
        1,0,0,0,289,277,1,0,0,0,289,281,1,0,0,0,289,286,1,0,0,0,290,50,1,
        0,0,0,291,295,7,0,0,0,292,294,7,1,0,0,293,292,1,0,0,0,294,297,1,
        0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,52,1,0,0,0,297,295,1,0,
        0,0,298,300,7,2,0,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,
        0,0,301,302,1,0,0,0,302,309,1,0,0,0,303,305,5,46,0,0,304,306,7,2,
        0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,1,0,
        0,0,308,310,1,0,0,0,309,303,1,0,0,0,309,310,1,0,0,0,310,54,1,0,0,
        0,311,315,5,34,0,0,312,314,8,3,0,0,313,312,1,0,0,0,314,317,1,0,0,
        0,315,313,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,
        0,318,319,5,34,0,0,319,56,1,0,0,0,320,321,5,78,0,0,321,322,5,111,
        0,0,322,323,5,116,0,0,323,324,5,97,0,0,324,325,5,58,0,0,325,329,
        1,0,0,0,326,328,9,0,0,0,327,326,1,0,0,0,328,331,1,0,0,0,329,330,
        1,0,0,0,329,327,1,0,0,0,330,332,1,0,0,0,331,329,1,0,0,0,332,333,
        5,47,0,0,333,334,1,0,0,0,334,335,6,28,0,0,335,58,1,0,0,0,336,337,
        5,40,0,0,337,60,1,0,0,0,338,339,5,41,0,0,339,62,1,0,0,0,340,341,
        5,58,0,0,341,64,1,0,0,0,342,343,5,46,0,0,343,66,1,0,0,0,344,345,
        5,44,0,0,345,68,1,0,0,0,346,348,7,4,0,0,347,346,1,0,0,0,348,349,
        1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,
        6,34,0,0,352,70,1,0,0,0,353,354,9,0,0,0,354,72,1,0,0,0,9,0,289,295,
        301,307,309,315,329,349,1,6,0,0
    ]

class gramaticaEspanol(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FUNCION = 1
    SI = 2
    ENTONCES = 3
    FIN = 4
    MIENTRAS = 5
    ASIGNA = 6
    A_LA = 7
    DEVUELVE = 8
    ES_UN = 9
    ARREGLO_DE = 10
    DE = 11
    ES_DISTINTO_DE = 12
    ES_IGUAL_QUE = 13
    ES_MAYOR_QUE = 14
    ES_MENOR_QUE = 15
    ES_MAYOR_O_IGUAL_QUE = 16
    ES_MENOR_O_IGUAL_QUE = 17
    MAS = 18
    MENOS = 19
    POR = 20
    ENTRE = 21
    Y = 22
    O = 23
    NO = 24
    TIPO_DATO = 25
    ID = 26
    NUMERO = 27
    CADENA = 28
    COMENTARIO = 29
    PARENTESIS_IZQ = 30
    PARENTESIS_DER = 31
    DOS_PUNTOS = 32
    PUNTO = 33
    COMA = 34
    WS = 35
    ERROR = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'funcion'", "'si'", "'entonces:'", "'fin'", "'mientras'", "'asigna'", 
            "'a la'", "'devuelve'", "'es un'", "'arreglo de'", "'de'", "'es distinto de'", 
            "'es igual que'", "'es mayor que'", "'es menor que'", "'es mayor o igual que'", 
            "'es menor o igual que'", "'mas'", "'menos'", "'por'", "'entre'", 
            "'y'", "'o'", "'no'", "'('", "')'", "':'", "'.'", "','" ]

    symbolicNames = [ "<INVALID>",
            "FUNCION", "SI", "ENTONCES", "FIN", "MIENTRAS", "ASIGNA", "A_LA", 
            "DEVUELVE", "ES_UN", "ARREGLO_DE", "DE", "ES_DISTINTO_DE", "ES_IGUAL_QUE", 
            "ES_MAYOR_QUE", "ES_MENOR_QUE", "ES_MAYOR_O_IGUAL_QUE", "ES_MENOR_O_IGUAL_QUE", 
            "MAS", "MENOS", "POR", "ENTRE", "Y", "O", "NO", "TIPO_DATO", 
            "ID", "NUMERO", "CADENA", "COMENTARIO", "PARENTESIS_IZQ", "PARENTESIS_DER", 
            "DOS_PUNTOS", "PUNTO", "COMA", "WS", "ERROR" ]

    ruleNames = [ "FUNCION", "SI", "ENTONCES", "FIN", "MIENTRAS", "ASIGNA", 
                  "A_LA", "DEVUELVE", "ES_UN", "ARREGLO_DE", "DE", "ES_DISTINTO_DE", 
                  "ES_IGUAL_QUE", "ES_MAYOR_QUE", "ES_MENOR_QUE", "ES_MAYOR_O_IGUAL_QUE", 
                  "ES_MENOR_O_IGUAL_QUE", "MAS", "MENOS", "POR", "ENTRE", 
                  "Y", "O", "NO", "TIPO_DATO", "ID", "NUMERO", "CADENA", 
                  "COMENTARIO", "PARENTESIS_IZQ", "PARENTESIS_DER", "DOS_PUNTOS", 
                  "PUNTO", "COMA", "WS", "ERROR" ]

    grammarFileName = "gramaticaEspanol.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


